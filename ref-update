#!/usr/bin/env python
# .*. coding: UTF-8 .*.

import os
import re
import sys
import mantis
from optparse import OptionParser

def commit_message_parser(message):
   if re.match("[Bb][Uu][Gg][ ]*[0-9]+",message) == None:
      return False
   else:
      return True

def main():
   usage = 'Usage: %prog --project <project name> --refname <refname> --uploader <uploader> --oldrev <sha1> --newrev <sha1>'
   parser = OptionParser(usage)
   parser.set_defaults(keepSource=False)

   parser.add_option("--project", dest="projectName", help="Project Name")
   parser.add_option("--refname", dest="refName", help="Reference Name")
   parser.add_option("--uploader", dest="uploader", help="Uploader")
   parser.add_option("--oldrev", dest="oldRevision", help="Old Revision")
   parser.add_option("--newrev", dest="newRevision", help="New Revision")

   (options, args) = parser.parse_args()

   try:
      GIT_DIR = os.environ['GIT_DIR']
   except OSError:
      print "GIT_DIR env var not found!"
      sys.exit(1)

   # CHECK IF COMMIT MESSAGE MATCHES TO PREDEFINED PATTERN
   commit_message = mantis.get_commit_message(GIT_DIR,options.newRevision)

   if not commit_message_parser(commit_message):
      print "Ops,\nCommit message does not contain bug id identification!\nPlease change your commit message to start with:\n\tBug <bug number> - Commit message\nUse: git commit --amend\n"
      sys.exit(1)

   # GO AHEAD AND ACCEPT FIX
   sys.exit(0)

if __name__ == '__main__':
   main()
